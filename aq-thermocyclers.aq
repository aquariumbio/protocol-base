{"config":{"title":"Aquarium Thermocycler Models","description":"Models for standardizing usage of thermocyclers","copyright":"University of Washington","version":"0.0.1","authors":[{"name":"Devin Strickland","affilation":"","affiliation":"University of Washington"},{"name":"Eriberto Lopez","affilation":"","affiliation":"University of Washington"}],"maintainer":{"name":"Devin Strickland","email":"strcklnd@uw.edu"},"acknowledgements":[{"name":"Ben Keller","affiliation":"University of Washington"}],"github":{"user":"dvnstrcklnd","repo":"aq-thermocyclers","organization":"klavinslab"},"keywords":null,"aquadoc_version":"1.0.2","aquarium_version":"\u003c%= Bioturk::Application.config.aquarium_version %\u003e"},"components":[{"sample_types":[],"object_types":[],"operation_type":{"name":"PCR Test","category":"Test","deployed":false,"on_the_fly":false,"field_types":[],"protocol":"needs \"PCR Libs/PCRComposition\"\nneeds \"PCR Libs/PCRProgram\"\nneeds \"Thermocyclers/Thermocyclers\"\n\nclass Protocol\n\n  include ThermocyclerHelper\n\n  def main\n\n    composition = PCRCompositionFactory.build(\n      program_name: \"CDC_TaqPath_CG\"\n    )\n    program = PCRProgramFactory.build(\n      program_name: \"CDC_TaqPath_CG\", \n      volume: composition.volume\n    )\n\n    show do\n      title \"Composition and Program Test\"\n\n      note 'From the PCRProgram'\n      table program.table\n      note 'From the PCRComposition'\n      note \"Total volume: #{composition.volume}\"\n    end\n    \n    thermocycler = ThermocyclerFactory.build(\n      model: TestThermocycler::MODEL\n    )\n\n    show do \n      title 'Thermocycler Test'\n\n      note 'Template files:'\n      note thermocycler.program_template_file(program: program)\n      note thermocycler.layout_template_file(program: program)\n\n      note 'Test image path:'\n      note thermocycler.open_software_image\n    end\n\n    set_up_program(\n      thermocycler: thermocycler, \n      program: program, \n      composition: composition\n    )\n\n    load_plate_and_start_run(\n      thermocycler: thermocycler, \n      filename: 'test_filename'\n    )\n\n    export_measurements(thermocycler: thermocycler)\n\n    {}\n\n  end\n\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"class ProtocolTest \u003c ProtocolTestBase\n\n  def setup\n\n      add_random_operations(3)\n\n  end\n\n  def analyze\n      log('Hello from Nemo')\n      assert_equal(@backtrace.last[:operation], 'complete')\n  end\n\nend","timing":null}},{"library":{"name":"AbstractThermocycler","category":"Thermocyclers","code_source":"# TODO: Make a qPCR MixIn\n# TODO: Can duck type thermocycler on qPCR MixIn when available\n\nclass AbstractThermocycler\n\n  # CONSTANTS that really shouldn't ever change\n  # Should be overriden in concrete class\n  MODEL = \"\"\n  PROGRAM_EXT = \"\"\n  LAYOUT_EXT =  \"\"\n  SOFTWARE_NAME = \"thermocycler software\"\n  \n  private_constant :MODEL, :PROGRAM_EXT, :LAYOUT_EXT, :SOFTWARE_NAME\n\n  attr_reader :params\n\n  # Instantiates the class and sets the `@params` insteance variable\n  #\n  # @return [Thermocycler]\n  def initialize()\n    @params = default_params.update(user_defined_params)\n  end\n\n  # Lab-specific, user-defined parameters\n  #\n  # @note Should be overriden in concrete class\n  # @return [Hash]\n  def user_defined_params()\n    {}\n  end\n\n  # The model of the thermocycler\n  #\n  # @return [String]\n  def model()\n    self.class.const_get(:MODEL)\n  end\n\n  # The name of the software that controls the thermocycler\n  #\n  # @return [String]\n  def software_name()\n    self.class.const_get(:SOFTWARE_NAME)\n  end\n\n  ########## Language Methods\n  # These methods are not very specific and will probably need to be overridden\n  #   in the concrete classes.\n\n  # Instructions for opening the software that controls the thermocycler\n  #\n  # @return [String]\n  def open_software()\n    \"Open #{software_name}\"\n  end\n\n  # Instructions for setting the dye channel on a qPCR thermocycler\n  #\n  # @param composition [PCRComposition]\n  # @param dye_name [String] can be supplied instead of a `PCRComposition`\n  # @return [String]\n  # @todo should be moved to MixIn\n  def set_dye(composition: nil, dye_name: nil)\n    dye_name = composition.dye.try(:input_name) || dye_name\n    \"Choose \u003cb\u003e#{dye_name}\u003c/b\u003e as the dye\"\n  end\n\n  # Instructions for selecting the PCR program template in the software\n  #\n  # @param program [PCRProgram]\n  # @return [String]\n  def select_program_template(program:)\n    file = program_template_file(program: program)\n    \"Choose the program template \u003cb\u003e#{file}\u003c/b\u003e\"\n  end\n\n  # Instructions for selecting the plate layout template in the software\n  #\n  # @param program [PCRProgram]\n  # @return [String]\n  def select_layout_template(program:)\n    file = layout_template_file(program: program)\n    \"Choose the layout template \u003cb\u003e#{file}\u003c/b\u003e\"\n  end\n\n  # Instructions for placing a plate in the instrument\n  #\n  # @param plate [Collection]\n  # @return [String]\n  def place_plate_in_instrument(plate:)\n    \"Place plate #{plate} in the thermocycler\"\n  end\n\n  # Instructions for confirming the orientation of a plate in the instrument\n  #\n  # @return [String]\n  def confirm_plate_orientation()\n    \"MAKE SURE THAT THE PLATE IS IN THE CORRECT ORIENTATION\"\n  end\n\n  # Instructions for opening the lid\n  #\n  # @return [String]\n  def open_lid()\n    \"Click the \u003cb\u003eOpen Lid\u003c/b\u003e button\"\n  end\n\n  # Instructions for closing the lid\n  #\n  # @return [String]\n  def close_lid()\n    \"Click the \u003cb\u003eClose Lid\u003c/b\u003e button\"\n  end\n\n  # Instructions for starting the run\n  #\n  # @return [String]\n  def start_run()\n    \"Click the \u003cb\u003eStart Run\u003c/b\u003e button\"\n  end\n\n  # Instructions for saving an experiment file\n  #\n  # @param filename [String] the name of the file (without the full path)\n  # @return [String]\n  def save_experiment_file(filename:)\n    \"Save the experiment as #{filename} in #{params[:experiment_filepath]}\"\n  end\n\n  # Instructions for exporting measurements from a qPCR run\n  #\n  # @return [String]\n  def export_measurements()\n    \"Click \u003cb\u003eExport\u003c/b\u003e\u003cbr\u003e\" +\n    \"Select \u003cb\u003eExport All Data Sheets\u003c/b\u003e\u003cbr\u003e\" +\n    \"Export all sheets as CSV\u003cbr\u003e\" +\n    \"Save files to the #{params[:export_filepath]} directory\"\n  end\n\n  ########## Image Methods\n  # These probably should NOT be overridden in the concrete classes\n\n  # Image for launching the software that controls the thermocycler\n  #\n  # @return [String]\n  def open_software_image()\n    image_path(image_name: params[:open_software])\n  end\n\n  # Image for setting up the software workspace\n  #\n  # @return [String]\n  def setup_workspace_image()\n    image_path(image_name: params[:setup_workspace])\n  end\n\n  # Image for selecting the PCR program template in the software\n  #\n  # @return [String]\n  def setup_program_image()\n    image_path(image_name: params[:setup_program])\n  end\n\n  # Image for selecting the plate layout template in the software\n  #\n  # @return [String]\n  def setup_plate_layout_image()\n    image_path(image_name: params[:setup_plate_layout])\n  end\n\n  # Image for opening the lid\n  #\n  # @return [String]\n  def open_lid_image()\n    image_path(image_name: params[:open_lid])\n  end\n\n  # Image for closing the lid\n  #\n  # @return [String]\n  def close_lid_image()\n    image_path(image_name: params[:close_lid])\n  end\n\n  # Image for starting the run\n  #\n  # @return [String]\n  def start_run_image()\n    image_path(image_name: params[:start_run])\n  end\n\n  # Image for exporting measurements from a qPCR run\n  #\n  # @return [String]\n  def export_results_image()\n    image_path(image_name: params[:export_results])\n  end\n\n  ########## Template File Methods\n  # These probably should NOT be overridden in the concrete classes\n\n  def program_template_file(program:)\n    template_file(\n      template_name: program.program_template_name, \n      extension: :PROGRAM_EXT\n    )\n  end\n\n  def layout_template_file(program:)\n    template_file(\n      template_name: program.layout_template_name, \n      extension: :LAYOUT_EXT\n    )\n  end\n\n  private\n\n  def default_params()\n    {\n      experiment_filepath: \"\",\n      export_filepath: \"\",\n      image_path: \"\",\n      open_software: \"open_software.png\",\n      setup_workspace: \"setup_workspace.png\",\n      setup_program: \"setup_program.png\",\n      setup_plate_layout: \"setup_plate_layout.png\",\n      open_lid: \"open_lid.png\",\n      close_lid: \"close_lid.png\",\n      start_run: \"start_run.png\",\n      export_results: \"export_results.png\"\n    }\n  end\n\n  def image_path(image_name:)\n    File.join(params[:image_path], image_name)\n  end\n\n  def template_file(template_name:, extension:)\n    ext = self.class.const_get(extension)\n    (template_name + '.' + ext).gsub(/\\.+/, '.')\n  end\n\nend\n"}},{"library":{"name":"BioRadCFX96","category":"Thermocyclers","code_source":"# @author Eriberto Lopez \u003celopez3@uw.edu\u003e\n# @note BioRad module originally deployed as `QPCR_ThermocyclerLib`\n#   on UW BIOFAB production 10/05/18\n\nneeds \"Thermocyclers/AbstractThermocycler\"\n\nclass BioRadCFX96 \u003c AbstractThermocycler\n\n  MODEL = \"BioRad CFX96\"\n  PROGRAM_EXT = \".prcl\"\n  LAYOUT_EXT =  \".pltd\"\n\n  # Instantiates the class\n  #\n  # @return [BioRadCFX96]\n  def initialize()\n    super()\n  end\n\n  # Lab-specific, user-defined parameters\n  #\n  # @return [Hash]\n  def user_defined_params()\n    {\n      experiment_filepath: \"Desktop/_qPCR_UWBIOFAB\",\n      export_filepath: \"Desktop/BIOFAB qPCR Exports\",\n      image_path: \"Actions/BioRad_qPCR_Thermocycler\",\n      open_software: \"open_biorad_thermo_workspace.JPG\",\n      setup_workspace: \"setup_workspace.JPG\",\n      setup_program: \"setting_up_qPCR_thermo_conditions.png\",\n      setup_plate_layout: \"setting_up_plate_layout_v1.png\",\n      open_lid: \"open_lid.png\",\n      close_lid: \"close_lid.png\",\n      start_run: \"start_run.png\",\n      export_results: \"exporting_qPCR_quantification.png\"\n    }\n  end\nend\n"}},{"library":{"name":"TestThermocycler","category":"Thermocyclers","code_source":"needs 'Thermocyclers/AbstractThermocycler'\n\nclass TestThermocycler \u003c AbstractThermocycler\n\n  # CONSTANTS that really shouldn't ever change\n  MODEL = \"Test Model\"\n  PROGRAM_EXT = \".abc\"\n  LAYOUT_EXT =  \"xyz\" # Intentionally missing leading dot for test\n\n  # Instantiates the class\n  #\n  # @return [TestThermocycler]\n  def initialize()\n    super()\n  end\n\n  # Lab-specific, user-defined parameters\n  #\n  # @return [Hash]\n  def user_defined_params()\n    {\n      experiment_filepath: \"Desktop/test_experiment_path\",\n      export_filepath: \"Desktop/test_export_path\",\n      image_path: \"Actions/TestThermocycler\"\n    }\n  end\n\n  def say_hello()\n    \"Hello, my name is #{MODEL}\"\n  end\n\nend"}},{"library":{"name":"Thermocyclers","category":"Thermocyclers","code_source":"# Library for handling thermocyclers, including qPCR thermocyclers\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\n\nneeds \"Thermocyclers/TestThermocycler\"\nneeds \"Thermocyclers/BioRadCFX96\"\n\n# Helper module for standard thermocycler procedures\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\n# @author Eriberto Lopez \u003celopez3@uw.edu\u003e\n# @note methods originally deployed as `QPCR_ThermocyclerLib`\n#   on UW BIOFAB production 10/05/18\nmodule ThermocyclerHelper\n\n  # Steps for setting up a proram in a thermocycler\n  #\n  # @param thermocycler [Thermocycler]\n  # @param program [PCRProgram]\n  # @param composition [PCRComposition]\n  def set_up_program(thermocycler:, program:, composition:)\n    show do\n      title \"Set Up #{thermocycler.model} Thermocycler\"\n\n      note thermocycler.open_software\n      image thermocycler.open_software_image\n      separator\n\n      # TODO: What happens if this is not a qPCR experiment?\n      note thermocycler.set_dye(composition: composition)\n      image thermocycler.setup_workspace_image\n      separator\n\n      note thermocycler.select_program_template(program: program)\n      image thermocycler.setup_program_image\n      separator\n\n      # TODO: What happens if this is not a qPCR experiment?\n      note thermocycler.select_layout_template(program: program)\n      image thermocycler.setup_plate_layout_image\n    end\n  end\n\n  # Steps for loading physical tubes or plates into a thermocycler\n  #\n  # @param thermocycler [Thermocycler]\n  # @param items [Item, Array\u003cItem\u003e]\n  # @param filename [String] the filename to safe the experiment file \n  def load_plate_and_start_run(thermocycler:, items: [], filename: nil)\n\n    # Normalize the presentation of `items`\n    items = [items] if items.respond_to?(:collection?)\n\n    show do\n      title \"Start Run on #{thermocycler.model} Thermocycler\"\n      \n      note thermocycler.open_lid\n      image thermocycler.open_lid_image\n      separator\n\n      # TODO: Make this work for plates, stripwells, and individual tubes\n      if items.length == 1 \u0026\u0026 is_96well_plate?(items.first)\n        note thermocycler.place_plate_in_instrument(plate: items.first)\n        warning thermocycler.confirm_plate_orientation\n      else\n        note 'Place samples in thermocycler'\n      end\n      separator\n\n      note thermocycler.close_lid\n      image thermocycler.close_lid_image\n      separator\n\n      note thermocycler.start_run\n      # TODO: What happens if this is not a qPCR experiment?\n      note thermocycler.save_experiment_file(filename: filename) if filename.present?\n      image thermocycler.start_run_image\n    end\n  end\n\n  # Export the measurements, if a qPCR run\n  #\n  # @param thermocycler [Thermocycler]\n  def export_measurements(thermocycler:)\n    show do\n      title \"Export Measurements\"\n      \n      note \"Once the run has finished, export the measurements\"\n      note thermocycler.export_measurements()\n      image thermocycler.export_results_image\n    end\n  end\n\n  # TODO: A method from Eriberto Lopez's code that I haven't implemented yet\n  # def upload_measurments(experiment_name)\n  #   upload_filename = experiment_name + \" - Quantification Summary_0.csv\" # Suffix of file will always be the same\n  #   up_show, up_sym = upload_show(upload_path = EXPORT_FILEPATH, upload_filename)\n  #   if debug\n  #     upload = Upload.find(11278) # Dummy data set\n  #   else\n  #     upload = find_upload_from_show(up_show, up_sym)\n  #   end\n  #   return upload\n  # end\n\n  private\n\n  # Test whether an item is a 96 well plate\n  #\n  # @param item [Item]\n  # @return [Boolean]\n  def is_96well_plate?(item)\n    item.collection? \u0026\u0026 item.capacity == 96\n  end\nend\n\n# Factory class for building thermocycler objects\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\nclass ThermocyclerFactory\n\n  # Instantiates a new `Thermocycler`\n  #\n  # @param model [String] the `MODEL` of the thermocycler. Must match the \n  #   constant `MODEL` in an exisiting thermocycler class.\n  # @return [Thermocycler]\n  def self.build(model:)\n    case model\n    when TestThermocycler::MODEL\n      TestThermocycler.new()\n    when BioRadCFX96::MODEL\n      BioRadCFX96.new()\n    else\n      msg = \"Unrecognized Thermocycler Model: #{model}\"\n      raise ThermocyclerInputError.new(msg)\n    end\n  end\nend\n\nclass ThermocyclerInputError \u003c ProtocolError; end\n"}}]}